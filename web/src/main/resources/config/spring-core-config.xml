<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--扫描注解-->
    <context:component-scan base-package="com.cardpay">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--配置WebSocket engine,设置websocket的内容大小-->
    <bean id="serverFactory" class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
        <property name="maxTextMessageBufferSize" value="8192"/>
        <property name="maxBinaryMessageBufferSize" value="8192"/>
    </bean>

    <!-- 定时任务注解 -->
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/>
    <task:scheduler id="qbScheduler" pool-size="10"/>

    <!--&lt;!&ndash;yml第三方propertities读取&ndash;&gt;-->
    <!--<context:annotation-config/>-->
    <!--<bean id="yamlProperties" class="org.springframework.beans.factory.config.YamlPropertiesFactoryBean">-->
    <!--<property name="resources" value="classpath:conf/zzc.yml"/>-->
    <!--</bean>-->
    <!--<context:property-placeholder properties-ref="yamlProperties"/>-->
    <!--<bean id="bankProperties" class="org.springframework.beans.factory.config.YamlPropertiesFactoryBean">-->
    <!--<property name="resources" value="classpath:conf/bank.yml"/>-->
    <!--</bean>-->
    <!--<context:property-placeholder properties-ref="bankProperties"/>-->

    <!-- 支持上传文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="314572800"/><!-- 300M -->
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="resolveLazily" value="true"></property>
    </bean>

    <!--bean操作工具类-->
    <bean class="com.cardpay.basic.util.BeanFactoryUtil"/>

    <!-- 邮件配置 -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${email.host}"></property>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">25000</prop>
            </props>
        </property>
        <property name="username" value="${email.username}"></property>
        <property name="password" value="${email.password}"></property>
    </bean>
    <bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="${email.username}"/>
        <property name="subject" value="邮件主题"/>
        <!-- <property name="text" value="邮件内容" /> -->
    </bean>


    <!-- captcha验证码配置 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">yes</prop>
                        <prop key="kaptcha.border.color">255,255,255</prop>
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <prop key="kaptcha.image.width">125</prop>
                        <prop key="kaptcha.image.height">45</prop>
                        <prop key="kaptcha.textproducer.font.size">45</prop>
                        <prop key="kaptcha.session.key">code</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <!-- 线程池 -->
    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>

    <!-- 当Spring容器启动完成后执行下面的这个Bean -->
    <bean class="com.cardpay.core.process.BeanPostProcessor"/>

    <!--引用其他xml配置文件-->
    <import resource="classpath:config/spring-config-shiro.xml"/>
    <import resource="classpath:config/spring-config-redis.xml"/>
    <import resource="classpath:config/spring-config-rabbitmq.xml"/>
    <import resource="classpath:config/spring-config-database.xml"/>
    <import resource="classpath:config/spring-config-httpclient.xml"/>
    <import resource="classpath:config/spring-config-dozer.xml"/>

    <!--开发环境变量设置-->
    <beans profile="dev">
        <!--编码方式获取propertity数据信息-->
        <bean class="com.cardpay.basic.common.context.ContextProperty">
            <property name="locations">
                <list>
                    <value>classpath:properties/dev/jdbc.properties</value>
                    <value>classpath:properties/dev/email.properties</value>
                    <value>classpath:properties/dev/redis.properties</value>
                    <value>classpath:properties/dev/httpclient.properties</value>
                    <value>classpath:properties/dev/rabbitmq.properties</value>
                </list>
            </property>
        </bean>
    </beans>

    <beans profile="prod">
        <!--编码方式获取propertity数据信息-->
        <bean class="com.cardpay.basic.common.context.ContextProperty">
            <property name="locations">
                <list>
                    <value>classpath:properties/prod/jdbc.properties</value>
                    <value>classpath:properties/prod/email.properties</value>
                    <value>classpath:properties/prod/redis.properties</value>
                    <value>classpath:properties/prod/httpclient.properties</value>
                    <value>classpath:properties/prod/rabbitmq.properties</value>
                </list>
            </property>
        </bean>
    </beans>

</beans>