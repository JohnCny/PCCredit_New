<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- 数据源MySQL -->
    <bean id="mysqlDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClassName" value="${mysql.driverClass}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${mysql.jdbcUrl}" />
        <property name="username" value="${mysql.name}" />
        <property name="password" value="${mysql.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 数据源Oracle -->
    <bean id="oracleDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClassName" value="${oracle.driverClass}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${oracle.jdbcUrl}" />
        <property name="username" value="${oracle.name}" />
        <property name="password" value="${oracle.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="select 1 from dual" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 使用spring的会话管理 -->
    <!-- 定义 myBatis的sqlSessionFactory
    1、当使用MapperScannerConfigurer时不需要configLocation定义(
        1：mapperLocations可以批量载入mapper，但是MapperScannerConfigurer扫描mapper后不会将已存在的mapper加入到Configuration中
        2：也可以定义configLocation文件，在里面设置settings和typeAliases等来覆写默认的配置
        3：如果使用了configLocation文件，并且里面也定义了mappers，那么在MapperScannerConfigurer扫描动作中就不会加入已经存在的mapper了
            （同mapperLocations情况一样）
        4：综上所述：建议采用扫描来完成mapper的注册，并且在sqlSessionFactory的bean配置中不需要设置mapperLocations，
            如果设置了configLocation文件，那么configLocation文件里也不需要再设置mapper了
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="oracleDataSource"/>
        <!--Map的拦截器配置-->
        <property name="plugins">
            <array>
                <bean class="com.cardpay.basic.common.interceptor.mapper.MapInterceptor"/>
                <bean class="com.cardpay.basic.common.interceptor.mapper.SqlTimeInterceptor"/>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            rowBoundsWithCount = true
                            reasonable = true
                            offsetAsPageNum = true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cardpay.mgt" />
        <!--扫描的mapper必须继承接口,如果不添加则会重复扫描其他bean导致无法注入-->
        <property name="markerInterface" value="com.cardpay.basic.base.mapper.BasicMapper"/>
    </bean>

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cardpay.mgt"/>
        <!--扫描的mapper必须继承接口,如果不添加则会重复扫描其他bean导致无法注入-->
        <property name="markerInterface" value="com.cardpay.basic.base.mapper.BasicMapper"/>
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                ORDER=BEFORE
            </value>
        </property>
    </bean>

    <!-- (事务管理)transaction basic, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="oracleDataSource"/>
    </bean>

    <!--支持注解驱动的事务管理，指定事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
</beans>